<?php
// The following code is automatically generated by ./tools/generate.php
// please edit the files in ./tools/templates/ instead of editing this
// file directly.

class EtherpadLiteClient {

  const API_VERSION             = '1.2.11';

  const CODE_OK                 = 0;
  const CODE_INVALID_PARAMETERS = 1;
  const CODE_INTERNAL_ERROR     = 2;
  const CODE_INVALID_FUNCTION   = 3;
  const CODE_INVALID_API_KEY    = 4;

  protected $apiKey = "";
  protected $baseUrl = "http://localhost:9001/api";
  
  public function __construct($apiKey, $baseUrl = null){
    if (strlen($apiKey) < 1){
      throw new InvalidArgumentException("[{$apiKey}] is not a valid API key");
    }
    $this->apiKey  = $apiKey;

    if (isset($baseUrl)){
      $this->baseUrl = $baseUrl;
    }
    if (!filter_var($this->baseUrl, FILTER_VALIDATE_URL)){
      throw new InvalidArgumentException("[{$this->baseUrl}] is not a valid URL");
    }
  }

  protected function get($function, array $arguments = array()){
    return $this->call($function, $arguments, 'GET');
  }

  protected function post($function, array $arguments = array()){
    return $this->call($function, $arguments, 'POST');
  }

  protected function call($function, array $arguments = array(), $method = 'GET'){
    $arguments['apikey'] = $this->apiKey;
    $arguments = http_build_query($arguments, '', '&');
    $url = $this->baseUrl."/".self::API_VERSION."/".$function;
    if ($method !== 'POST'){
      $url .=  "?".$arguments;
    }
    // use curl of it's available
    if (function_exists('curl_init')){
      $c = curl_init($url);
      curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($c, CURLOPT_TIMEOUT, 20);
      if ($method === 'POST'){
        curl_setopt($c, CURLOPT_POST, true);
        curl_setopt($c, CURLOPT_POSTFIELDS, $arguments);
      }
      $result = curl_exec($c);
      curl_close($c);
    // fallback to plain php
    } else {
      $params = array('http' => array('method' => $method, 'ignore_errors' => true, 'header' => 'Content-Type:application/x-www-form-urlencoded'));
      if ($method === 'POST'){
        $params['http']['content'] = $arguments;
      }
      $context = stream_context_create($params);
      $fp = fopen($url, 'rb', false, $context);
      $result = $fp ? stream_get_contents($fp) : null;
    }
    
    if(!$result){
      throw new UnexpectedValueException("Empty or No Response from the server");
    }
    
    $result = json_decode($result);
    if ($result === null){
      throw new UnexpectedValueException("JSON response could not be decoded");
    }
    return $this->handleResult($result);
  }

  protected function handleResult($result){
    if (!isset($result->code)){
      throw new RuntimeException("API response has no code");
    }
    if (!isset($result->message)){
      throw new RuntimeException("API response has no message");
    }
    if (!isset($result->data)){
      $result->data = null;
    }

    switch ($result->code){
      case self::CODE_OK:
        return $result->data;
      case self::CODE_INVALID_PARAMETERS:
      case self::CODE_INVALID_API_KEY:
        throw new InvalidArgumentException($result->message);
      case self::CODE_INTERNAL_ERROR:
        throw new RuntimeException($result->message);
      case self::CODE_INVALID_FUNCTION:
        throw new BadFunctionCallException($result->message);
      default:
        throw new RuntimeException("An unexpected error occurred whilst handling the response");
    }
  }

    // createGroup  
  public function createGroup(){
    return $this->post("createGroup", array(
          ));
  }

  // createGroupIfNotExistsFor  
  public function createGroupIfNotExistsFor($groupMapper){
    return $this->post("createGroupIfNotExistsFor", array(
              "groupMapper" => $groupMapper,
          ));
  }

  // deleteGroup  
  public function deleteGroup($groupID){
    return $this->post("deleteGroup", array(
              "groupID" => $groupID,
          ));
  }

  // listPads  
  public function listPads($groupID){
    return $this->get("listPads", array(
              "groupID" => $groupID,
          ));
  }

  // listAllPads  
  public function listAllPads(){
    return $this->get("listAllPads", array(
          ));
  }

  // createDiffHTML  
  public function createDiffHTML($padID, $startRev, $endRev){
    return $this->post("createDiffHTML", array(
              "padID" => $padID,
              "startRev" => $startRev,
              "endRev" => $endRev,
          ));
  }

  // createPad  
  public function createPad($padID, $text){
    return $this->post("createPad", array(
              "padID" => $padID,
              "text" => $text,
          ));
  }

  // createGroupPad  
  public function createGroupPad($groupID, $padName, $text){
    return $this->post("createGroupPad", array(
              "groupID" => $groupID,
              "padName" => $padName,
              "text" => $text,
          ));
  }

  // createAuthor  
  public function createAuthor($name){
    return $this->post("createAuthor", array(
              "name" => $name,
          ));
  }

  // createAuthorIfNotExistsFor  
  public function createAuthorIfNotExistsFor($authorMapper, $name){
    return $this->post("createAuthorIfNotExistsFor", array(
              "authorMapper" => $authorMapper,
              "name" => $name,
          ));
  }

  // listPadsOfAuthor  
  public function listPadsOfAuthor($authorID){
    return $this->get("listPadsOfAuthor", array(
              "authorID" => $authorID,
          ));
  }

  // createSession  
  public function createSession($groupID, $authorID, $validUntil){
    return $this->post("createSession", array(
              "groupID" => $groupID,
              "authorID" => $authorID,
              "validUntil" => $validUntil,
          ));
  }

  // deleteSession  
  public function deleteSession($sessionID){
    return $this->post("deleteSession", array(
              "sessionID" => $sessionID,
          ));
  }

  // getSessionInfo  
  public function getSessionInfo($sessionID){
    return $this->get("getSessionInfo", array(
              "sessionID" => $sessionID,
          ));
  }

  // listSessionsOfGroup  
  public function listSessionsOfGroup($groupID){
    return $this->get("listSessionsOfGroup", array(
              "groupID" => $groupID,
          ));
  }

  // listSessionsOfAuthor  
  public function listSessionsOfAuthor($authorID){
    return $this->get("listSessionsOfAuthor", array(
              "authorID" => $authorID,
          ));
  }

  // getText  
  public function getText($padID, $rev){
    return $this->get("getText", array(
              "padID" => $padID,
              "rev" => $rev,
          ));
  }

  // setText  
  public function setText($padID, $text){
    return $this->post("setText", array(
              "padID" => $padID,
              "text" => $text,
          ));
  }

  // getHTML  
  public function getHTML($padID, $rev){
    return $this->get("getHTML", array(
              "padID" => $padID,
              "rev" => $rev,
          ));
  }

  // setHTML  
  public function setHTML($padID, $html){
    return $this->post("setHTML", array(
              "padID" => $padID,
              "html" => $html,
          ));
  }

  // getAttributePool  
  public function getAttributePool($padID){
    return $this->get("getAttributePool", array(
              "padID" => $padID,
          ));
  }

  // getRevisionsCount  
  public function getRevisionsCount($padID){
    return $this->get("getRevisionsCount", array(
              "padID" => $padID,
          ));
  }

  // getSavedRevisionsCount  
  public function getSavedRevisionsCount($padID){
    return $this->get("getSavedRevisionsCount", array(
              "padID" => $padID,
          ));
  }

  // listSavedRevisions  
  public function listSavedRevisions($padID){
    return $this->get("listSavedRevisions", array(
              "padID" => $padID,
          ));
  }

  // saveRevision  
  public function saveRevision($padID, $rev){
    return $this->post("saveRevision", array(
              "padID" => $padID,
              "rev" => $rev,
          ));
  }

  // getRevisionChangeset  
  public function getRevisionChangeset($padID, $rev){
    return $this->get("getRevisionChangeset", array(
              "padID" => $padID,
              "rev" => $rev,
          ));
  }

  // getLastEdited  
  public function getLastEdited($padID){
    return $this->get("getLastEdited", array(
              "padID" => $padID,
          ));
  }

  // deletePad  
  public function deletePad($padID){
    return $this->post("deletePad", array(
              "padID" => $padID,
          ));
  }

  // copyPad  
  public function copyPad($sourceID, $destinationID, $force){
    return $this->post("copyPad", array(
              "sourceID" => $sourceID,
              "destinationID" => $destinationID,
              "force" => $force,
          ));
  }

  // movePad  
  public function movePad($sourceID, $destinationID, $force){
    return $this->post("movePad", array(
              "sourceID" => $sourceID,
              "destinationID" => $destinationID,
              "force" => $force,
          ));
  }

  // getReadOnlyID  
  public function getReadOnlyID($padID){
    return $this->get("getReadOnlyID", array(
              "padID" => $padID,
          ));
  }

  // getPadID  
  public function getPadID($roID){
    return $this->get("getPadID", array(
              "roID" => $roID,
          ));
  }

  // setPublicStatus  
  public function setPublicStatus($padID, $publicStatus){
    return $this->post("setPublicStatus", array(
              "padID" => $padID,
              "publicStatus" => $publicStatus,
          ));
  }

  // getPublicStatus  
  public function getPublicStatus($padID){
    return $this->get("getPublicStatus", array(
              "padID" => $padID,
          ));
  }

  // setPassword  
  public function setPassword($padID, $password){
    return $this->post("setPassword", array(
              "padID" => $padID,
              "password" => $password,
          ));
  }

  // isPasswordProtected  
  public function isPasswordProtected($padID){
    return $this->get("isPasswordProtected", array(
              "padID" => $padID,
          ));
  }

  // listAuthorsOfPad  
  public function listAuthorsOfPad($padID){
    return $this->get("listAuthorsOfPad", array(
              "padID" => $padID,
          ));
  }

  // padUsersCount  
  public function padUsersCount($padID){
    return $this->get("padUsersCount", array(
              "padID" => $padID,
          ));
  }

  // getAuthorName  
  public function getAuthorName($authorID){
    return $this->get("getAuthorName", array(
              "authorID" => $authorID,
          ));
  }

  // padUsers  
  public function padUsers($padID){
    return $this->get("padUsers", array(
              "padID" => $padID,
          ));
  }

  // sendClientsMessage  
  public function sendClientsMessage($padID, $msg){
    return $this->post("sendClientsMessage", array(
              "padID" => $padID,
              "msg" => $msg,
          ));
  }

  // listAllGroups  
  public function listAllGroups(){
    return $this->get("listAllGroups", array(
          ));
  }

  // checkToken  
  public function checkToken(){
    return $this->post("checkToken", array(
          ));
  }

  // getChatHistory  
  public function getChatHistory($padID, $start, $end){
    return $this->get("getChatHistory", array(
              "padID" => $padID,
              "start" => $start,
              "end" => $end,
          ));
  }

  // getChatHead  
  public function getChatHead($padID){
    return $this->get("getChatHead", array(
              "padID" => $padID,
          ));
  }

  // restoreRevision  
  public function restoreRevision($padID, $rev){
    return $this->post("restoreRevision", array(
              "padID" => $padID,
              "rev" => $rev,
          ));
  }


}

